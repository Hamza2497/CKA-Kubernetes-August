
Service Object

1. ClsuterIP


Create a POD of nginx

# vim newpod.yml

apiVersion: v1 # schema that k8s uses to create the pod object
kind: Pod   # object to be created by kubernetes
metadata:
 name: pod1  # give any name to pod
 labels:     # labels are sued to query similar pods on the cluster, labels are key and values given by user
  author: sonal
  app: webapp
  env: test
spec:   # speciify what is it that you want on the pod
 containers:
  - name: c1
    image: nginx


# kubectl create -f newpod.yml


# vim service.yml

apiVersion: v1
kind: Service
metadata:
 name: mysvc
spec:
  type: NodePort
  selector: # select those pods with the matching label
   app: webapp
  ports:
  - port: 80   # service object port
    targetPort: 80  # container port


# kubectl create -f service.yml

# kubectl get service mysvc

# kubectl get endpoints


Create a test pod to check if request can be sent to nginx

# kubectl run pod2 --image ubuntu --command sleep 6000

# kubectl get pods


# kubectl exec -it pod2 -- bash

in the pod execute

# apt-get update && apt-get install curl -y

# curl mysvc
===========================================================

Service - NodePort:
=======================================

# kubectl delete pods --all

# vim replicaset-1.yml

apiVersion: apps/v1
kind: ReplicaSet
metadata:
 name: myrs
spec:
 replicas: 3
 selector: 
  matchLabels:
   app: webserver
 template: 
  metadata:
   labels:
    app: webserver
  spec:
   containers:
    - name: c1
      image: nginx


# kubectl create -f replicaset-1.yml

we will have 3 endpoints





